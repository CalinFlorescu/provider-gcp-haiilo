/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AwsAccessKeyObservation struct {
}

type AwsAccessKeyParameters struct {

	// AWS Key ID.
	// AWS Key ID.
	// +kubebuilder:validation:Required
	AccessKeyIDSecretRef v1.SecretKeySelector `json:"accessKeyIdSecretRef" tf:"-"`

	// AWS Secret Access Key.
	// AWS Secret Access Key.
	// +kubebuilder:validation:Required
	SecretAccessKeySecretRef v1.SecretKeySelector `json:"secretAccessKeySecretRef" tf:"-"`
}

type AwsS3DataSourceObservation struct {
}

type AwsS3DataSourceParameters struct {

	// AWS credentials block.
	// AWS credentials block.
	// +kubebuilder:validation:Optional
	AwsAccessKey []AwsAccessKeyParameters `json:"awsAccessKey,omitempty" tf:"aws_access_key,omitempty"`

	// Google Cloud Storage bucket name.
	// S3 Bucket name.
	// +kubebuilder:validation:Required
	BucketName *string `json:"bucketName" tf:"bucket_name,omitempty"`

	// The Amazon Resource Name (ARN) of the role to support temporary credentials via 'AssumeRoleWithWebIdentity'. For more information about ARNs, see IAM ARNs. When a role ARN is provided, Transfer Service fetches temporary credentials for the session using a 'AssumeRoleWithWebIdentity' call for the provided role using the [GoogleServiceAccount][] for this project.
	// The Amazon Resource Name (ARN) of the role to support temporary credentials via 'AssumeRoleWithWebIdentity'. For more information about ARNs, see [IAM ARNs](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-arns). When a role ARN is provided, Transfer Service fetches temporary credentials for the session using a 'AssumeRoleWithWebIdentity' call for the provided role using the [GoogleServiceAccount][] for this project.
	// +kubebuilder:validation:Optional
	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn,omitempty"`
}

type AzureBlobStorageDataSourceObservation struct {
}

type AzureBlobStorageDataSourceParameters struct {

	// Credentials used to authenticate API requests to Azure block.
	// Credentials used to authenticate API requests to Azure.
	// +kubebuilder:validation:Required
	AzureCredentials []AzureCredentialsParameters `json:"azureCredentials" tf:"azure_credentials,omitempty"`

	// The container to transfer from the Azure Storage account.`
	// The container to transfer from the Azure Storage account.
	// +kubebuilder:validation:Required
	Container *string `json:"container" tf:"container,omitempty"`

	// Root path to transfer objects. Must be an empty string or full path name that ends with a '/'. This field is treated as an object prefix. As such, it should generally not begin with a '/'.
	// Root path to transfer objects. Must be an empty string or full path name that ends with a '/'. This field is treated as an object prefix. As such, it should generally not begin with a '/'.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The name of the Azure Storage account.
	// The name of the Azure Storage account.
	// +kubebuilder:validation:Required
	StorageAccount *string `json:"storageAccount" tf:"storage_account,omitempty"`
}

type AzureCredentialsObservation struct {
}

type AzureCredentialsParameters struct {

	// Azure shared access signature. See Grant limited access to Azure Storage resources using shared access signatures (SAS).
	// Azure shared access signature.
	// +kubebuilder:validation:Required
	SasTokenSecretRef v1.SecretKeySelector `json:"sasTokenSecretRef" tf:"-"`
}

type GcsDataSinkObservation struct {
}

type GcsDataSinkParameters struct {

	// Google Cloud Storage bucket name.
	// Google Cloud Storage bucket name.
	// +kubebuilder:validation:Required
	BucketName *string `json:"bucketName" tf:"bucket_name,omitempty"`

	// Root path to transfer objects. Must be an empty string or full path name that ends with a '/'. This field is treated as an object prefix. As such, it should generally not begin with a '/'.
	// Google Cloud Storage path in bucket to transfer
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type GcsDataSourceObservation struct {
}

type GcsDataSourceParameters struct {

	// Google Cloud Storage bucket name.
	// Google Cloud Storage bucket name.
	// +kubebuilder:validation:Required
	BucketName *string `json:"bucketName" tf:"bucket_name,omitempty"`

	// Root path to transfer objects. Must be an empty string or full path name that ends with a '/'. This field is treated as an object prefix. As such, it should generally not begin with a '/'.
	// Google Cloud Storage path in bucket to transfer
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type HTTPDataSourceObservation struct {
}

type HTTPDataSourceParameters struct {

	// The URL that points to the file that stores the object list entries. This file must allow public access. Currently, only URLs with HTTP and HTTPS schemes are supported.
	// The URL that points to the file that stores the object list entries. This file must allow public access. Currently, only URLs with HTTP and HTTPS schemes are supported.
	// +kubebuilder:validation:Required
	ListURL *string `json:"listUrl" tf:"list_url,omitempty"`
}

type NotificationConfigObservation struct {
}

type NotificationConfigParameters struct {

	// Event types for which a notification is desired. If empty, send notifications for all event types. The valid types are "TRANSFER_OPERATION_SUCCESS", "TRANSFER_OPERATION_FAILED", "TRANSFER_OPERATION_ABORTED".
	// Event types for which a notification is desired. If empty, send notifications for all event types. The valid types are "TRANSFER_OPERATION_SUCCESS", "TRANSFER_OPERATION_FAILED", "TRANSFER_OPERATION_ABORTED".
	// +kubebuilder:validation:Optional
	EventTypes []*string `json:"eventTypes,omitempty" tf:"event_types,omitempty"`

	// The desired format of the notification message payloads. One of "NONE" or "JSON".
	// The desired format of the notification message payloads. One of "NONE" or "JSON".
	// +kubebuilder:validation:Required
	PayloadFormat *string `json:"payloadFormat" tf:"payload_format,omitempty"`

	// The Topic.name of the Pub/Sub topic to which to publish notifications. Must be of the format: projects/{project}/topics/{topic}. Not matching this format results in an INVALID_ARGUMENT error.
	// The Topic.name of the Pub/Sub topic to which to publish notifications.
	// +kubebuilder:validation:Required
	PubsubTopic *string `json:"pubsubTopic" tf:"pubsub_topic,omitempty"`
}

type ObjectConditionsObservation struct {
}

type ObjectConditionsParameters struct {

	// exclude_prefixes must follow the requirements described for include_prefixes. See Requirements.
	// exclude_prefixes must follow the requirements described for include_prefixes.
	// +kubebuilder:validation:Optional
	ExcludePrefixes []*string `json:"excludePrefixes,omitempty" tf:"exclude_prefixes,omitempty"`

	// If include_prefixes is specified, objects that satisfy the object conditions must have names that start with one of the include_prefixes and that do not start with any of the exclude_prefixes. If include_prefixes is not specified, all objects except those that have names starting with one of the exclude_prefixes must satisfy the object conditions. See Requirements.
	// If include_refixes is specified, objects that satisfy the object conditions must have names that start with one of the include_prefixes and that do not start with any of the exclude_prefixes. If include_prefixes is not specified, all objects except those that have names starting with one of the exclude_prefixes must satisfy the object conditions.
	// +kubebuilder:validation:Optional
	IncludePrefixes []*string `json:"includePrefixes,omitempty" tf:"include_prefixes,omitempty"`

	// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	// +kubebuilder:validation:Optional
	MaxTimeElapsedSinceLastModification *string `json:"maxTimeElapsedSinceLastModification,omitempty" tf:"max_time_elapsed_since_last_modification,omitempty"`

	// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	// A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	// +kubebuilder:validation:Optional
	MinTimeElapsedSinceLastModification *string `json:"minTimeElapsedSinceLastModification,omitempty" tf:"min_time_elapsed_since_last_modification,omitempty"`
}

type PosixDataSinkObservation struct {
}

type PosixDataSinkParameters struct {

	// Root directory path to the filesystem.
	// Root directory path to the filesystem.
	// +kubebuilder:validation:Required
	RootDirectory *string `json:"rootDirectory" tf:"root_directory,omitempty"`
}

type PosixDataSourceObservation struct {
}

type PosixDataSourceParameters struct {

	// Root directory path to the filesystem.
	// Root directory path to the filesystem.
	// +kubebuilder:validation:Required
	RootDirectory *string `json:"rootDirectory" tf:"root_directory,omitempty"`
}

type ScheduleEndDateObservation struct {
}

type ScheduleEndDateParameters struct {

	// Day of month. Must be from 1 to 31 and valid for the year and month.
	// Day of month. Must be from 1 to 31 and valid for the year and month.
	// +kubebuilder:validation:Required
	Day *float64 `json:"day" tf:"day,omitempty"`

	// Month of year. Must be from 1 to 12.
	// Month of year. Must be from 1 to 12.
	// +kubebuilder:validation:Required
	Month *float64 `json:"month" tf:"month,omitempty"`

	// Year of date. Must be from 1 to 9999.
	// Year of date. Must be from 1 to 9999.
	// +kubebuilder:validation:Required
	Year *float64 `json:"year" tf:"year,omitempty"`
}

type ScheduleObservation struct {
}

type ScheduleParameters struct {

	// Interval between the start of each scheduled transfer. If unspecified, the default value is 24 hours. This value may not be less than 1 hour. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	// Interval between the start of each scheduled transfer. If unspecified, the default value is 24 hours. This value may not be less than 1 hour. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
	// +kubebuilder:validation:Optional
	RepeatInterval *string `json:"repeatInterval,omitempty" tf:"repeat_interval,omitempty"`

	// The last day the recurring transfer will be run. If schedule_end_date is the same as schedule_start_date, the transfer will be executed only once. Structure documented below.
	// The last day the recurring transfer will be run. If schedule_end_date is the same as schedule_start_date, the transfer will be executed only once.
	// +kubebuilder:validation:Optional
	ScheduleEndDate []ScheduleEndDateParameters `json:"scheduleEndDate,omitempty" tf:"schedule_end_date,omitempty"`

	// The first day the recurring transfer is scheduled to run. If schedule_start_date is in the past, the transfer will run for the first time on the following day. Structure documented below.
	// The first day the recurring transfer is scheduled to run. If schedule_start_date is in the past, the transfer will run for the first time on the following day.
	// +kubebuilder:validation:Required
	ScheduleStartDate []ScheduleStartDateParameters `json:"scheduleStartDate" tf:"schedule_start_date,omitempty"`

	// The time in UTC at which the transfer will be scheduled to start in a day. Transfers may start later than this time. If not specified, recurring and one-time transfers that are scheduled to run today will run immediately; recurring transfers that are scheduled to run on a future date will start at approximately midnight UTC on that date. Note that when configuring a transfer with the Cloud Platform Console, the transfer's start time in a day is specified in your local timezone. Structure documented below.
	// The time in UTC at which the transfer will be scheduled to start in a day. Transfers may start later than this time. If not specified, recurring and one-time transfers that are scheduled to run today will run immediately; recurring transfers that are scheduled to run on a future date will start at approximately midnight UTC on that date. Note that when configuring a transfer with the Cloud Platform Console, the transfer's start time in a day is specified in your local timezone.
	// +kubebuilder:validation:Optional
	StartTimeOfDay []StartTimeOfDayParameters `json:"startTimeOfDay,omitempty" tf:"start_time_of_day,omitempty"`
}

type ScheduleStartDateObservation struct {
}

type ScheduleStartDateParameters struct {

	// Day of month. Must be from 1 to 31 and valid for the year and month.
	// Day of month. Must be from 1 to 31 and valid for the year and month.
	// +kubebuilder:validation:Required
	Day *float64 `json:"day" tf:"day,omitempty"`

	// Month of year. Must be from 1 to 12.
	// Month of year. Must be from 1 to 12.
	// +kubebuilder:validation:Required
	Month *float64 `json:"month" tf:"month,omitempty"`

	// Year of date. Must be from 1 to 9999.
	// Year of date. Must be from 1 to 9999.
	// +kubebuilder:validation:Required
	Year *float64 `json:"year" tf:"year,omitempty"`
}

type StartTimeOfDayObservation struct {
}

type StartTimeOfDayParameters struct {

	// Hours of day in 24 hour format. Should be from 0 to 23
	// Hours of day in 24 hour format. Should be from 0 to 23.
	// +kubebuilder:validation:Required
	Hours *float64 `json:"hours" tf:"hours,omitempty"`

	// Minutes of hour of day. Must be from 0 to 59.
	// Minutes of hour of day. Must be from 0 to 59.
	// +kubebuilder:validation:Required
	Minutes *float64 `json:"minutes" tf:"minutes,omitempty"`

	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
	// +kubebuilder:validation:Required
	Nanos *float64 `json:"nanos" tf:"nanos,omitempty"`

	// Seconds of minutes of the time. Must normally be from 0 to 59.
	// Seconds of minutes of the time. Must normally be from 0 to 59.
	// +kubebuilder:validation:Required
	Seconds *float64 `json:"seconds" tf:"seconds,omitempty"`
}

type TransferJobObservation struct {

	// When the Transfer Job was created.
	// When the Transfer Job was created.
	CreationTime *string `json:"creationTime,omitempty" tf:"creation_time,omitempty"`

	// When the Transfer Job was deleted.
	// When the Transfer Job was deleted.
	DeletionTime *string `json:"deletionTime,omitempty" tf:"deletion_time,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// When the Transfer Job was last modified.
	// When the Transfer Job was last modified.
	LastModificationTime *string `json:"lastModificationTime,omitempty" tf:"last_modification_time,omitempty"`
}

type TransferJobParameters struct {

	// Unique description to identify the Transfer Job.
	// Unique description to identify the Transfer Job.
	// +kubebuilder:validation:Required
	Description *string `json:"description" tf:"description,omitempty"`

	// Notification configuration. This is not supported for transfers involving PosixFilesystem. Structure documented below.
	// Notification configuration.
	// +kubebuilder:validation:Optional
	NotificationConfig []NotificationConfigParameters `json:"notificationConfig,omitempty" tf:"notification_config,omitempty"`

	// The project in which the resource belongs. If it
	// is not provided, the provider project is used.
	// The project in which the resource belongs. If it is not provided, the provider project is used.
	// +kubebuilder:validation:Optional
	Project *string `json:"project,omitempty" tf:"project,omitempty"`

	// Schedule specification defining when the Transfer Job should be scheduled to start, end and what time to run. Structure documented below.
	// Schedule specification defining when the Transfer Job should be scheduled to start, end and what time to run.
	// +kubebuilder:validation:Optional
	Schedule []ScheduleParameters `json:"schedule,omitempty" tf:"schedule,omitempty"`

	// Status of the job. Default: ENABLED. NOTE: The effect of the new job status takes place during a subsequent job run. For example, if you change the job status from ENABLED to DISABLED, and an operation spawned by the transfer is running, the status change would not affect the current operation.
	// Status of the job. Default: ENABLED. NOTE: The effect of the new job status takes place during a subsequent job run. For example, if you change the job status from ENABLED to DISABLED, and an operation spawned by the transfer is running, the status change would not affect the current operation.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Transfer specification. Structure documented below.
	// Transfer specification.
	// +kubebuilder:validation:Required
	TransferSpec []TransferSpecParameters `json:"transferSpec" tf:"transfer_spec,omitempty"`
}

type TransferOptionsObservation struct {
}

type TransferOptionsParameters struct {

	// Whether objects should be deleted from the source after they are transferred to the sink. Note that this option and delete_objects_unique_in_sink are mutually exclusive.
	// Whether objects should be deleted from the source after they are transferred to the sink. Note that this option and delete_objects_unique_in_sink are mutually exclusive.
	// +kubebuilder:validation:Optional
	DeleteObjectsFromSourceAfterTransfer *bool `json:"deleteObjectsFromSourceAfterTransfer,omitempty" tf:"delete_objects_from_source_after_transfer,omitempty"`

	// Whether objects that exist only in the sink should be deleted. Note that this option and
	// delete_objects_from_source_after_transfer are mutually exclusive.
	// Whether objects that exist only in the sink should be deleted. Note that this option and delete_objects_from_source_after_transfer are mutually exclusive.
	// +kubebuilder:validation:Optional
	DeleteObjectsUniqueInSink *bool `json:"deleteObjectsUniqueInSink,omitempty" tf:"delete_objects_unique_in_sink,omitempty"`

	// Whether overwriting objects that already exist in the sink is allowed.
	// Whether overwriting objects that already exist in the sink is allowed.
	// +kubebuilder:validation:Optional
	OverwriteObjectsAlreadyExistingInSink *bool `json:"overwriteObjectsAlreadyExistingInSink,omitempty" tf:"overwrite_objects_already_existing_in_sink,omitempty"`

	// When to overwrite objects that already exist in the sink. If not set, overwrite behavior is determined by overwrite_objects_already_existing_in_sink. Possible values: ALWAYS, DIFFERENT, NEVER.
	// When to overwrite objects that already exist in the sink. If not set, overwrite behavior is determined by overwriteObjectsAlreadyExistingInSink.
	// +kubebuilder:validation:Optional
	OverwriteWhen *string `json:"overwriteWhen,omitempty" tf:"overwrite_when,omitempty"`
}

type TransferSpecObservation struct {
}

type TransferSpecParameters struct {

	// An AWS S3 data source. Structure documented below.
	// An AWS S3 data source.
	// +kubebuilder:validation:Optional
	AwsS3DataSource []AwsS3DataSourceParameters `json:"awsS3DataSource,omitempty" tf:"aws_s3_data_source,omitempty"`

	// An Azure Blob Storage data source. Structure documented below.
	// An Azure Blob Storage data source.
	// +kubebuilder:validation:Optional
	AzureBlobStorageDataSource []AzureBlobStorageDataSourceParameters `json:"azureBlobStorageDataSource,omitempty" tf:"azure_blob_storage_data_source,omitempty"`

	// A Google Cloud Storage data sink. Structure documented below.
	// A Google Cloud Storage data sink.
	// +kubebuilder:validation:Optional
	GcsDataSink []GcsDataSinkParameters `json:"gcsDataSink,omitempty" tf:"gcs_data_sink,omitempty"`

	// A Google Cloud Storage data source. Structure documented below.
	// A Google Cloud Storage data source.
	// +kubebuilder:validation:Optional
	GcsDataSource []GcsDataSourceParameters `json:"gcsDataSource,omitempty" tf:"gcs_data_source,omitempty"`

	// A HTTP URL data source. Structure documented below.
	// A HTTP URL data source.
	// +kubebuilder:validation:Optional
	HTTPDataSource []HTTPDataSourceParameters `json:"httpDataSource,omitempty" tf:"http_data_source,omitempty"`

	// Only objects that satisfy these object conditions are included in the set of data source and data sink objects. Object conditions based on objects' last_modification_time do not exclude objects in a data sink. Structure documented below.
	// Only objects that satisfy these object conditions are included in the set of data source and data sink objects. Object conditions based on objects' last_modification_time do not exclude objects in a data sink.
	// +kubebuilder:validation:Optional
	ObjectConditions []ObjectConditionsParameters `json:"objectConditions,omitempty" tf:"object_conditions,omitempty"`

	// A POSIX data sink. Structure documented below.
	// A POSIX filesystem data sink.
	// +kubebuilder:validation:Optional
	PosixDataSink []PosixDataSinkParameters `json:"posixDataSink,omitempty" tf:"posix_data_sink,omitempty"`

	// A POSIX filesystem data source. Structure documented below.
	// A POSIX filesystem data source.
	// +kubebuilder:validation:Optional
	PosixDataSource []PosixDataSourceParameters `json:"posixDataSource,omitempty" tf:"posix_data_source,omitempty"`

	// Characteristics of how to treat files from datasource and sink during job. If the option delete_objects_unique_in_sink is true, object conditions based on objects' last_modification_time are ignored and do not exclude objects in a data source or a data sink. Structure documented below.
	// Characteristics of how to treat files from datasource and sink during job. If the option delete_objects_unique_in_sink is true, object conditions based on objects' last_modification_time are ignored and do not exclude objects in a data source or a data sink.
	// +kubebuilder:validation:Optional
	TransferOptions []TransferOptionsParameters `json:"transferOptions,omitempty" tf:"transfer_options,omitempty"`
}

// TransferJobSpec defines the desired state of TransferJob
type TransferJobSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TransferJobParameters `json:"forProvider"`
}

// TransferJobStatus defines the observed state of TransferJob.
type TransferJobStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TransferJobObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TransferJob is the Schema for the TransferJobs API. Creates a new Transfer Job in Google Cloud Storage Transfer.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,gcp-haiilo}
type TransferJob struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TransferJobSpec   `json:"spec"`
	Status            TransferJobStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TransferJobList contains a list of TransferJobs
type TransferJobList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TransferJob `json:"items"`
}

// Repository type metadata.
var (
	TransferJob_Kind             = "TransferJob"
	TransferJob_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TransferJob_Kind}.String()
	TransferJob_KindAPIVersion   = TransferJob_Kind + "." + CRDGroupVersion.String()
	TransferJob_GroupVersionKind = CRDGroupVersion.WithKind(TransferJob_Kind)
)

func init() {
	SchemeBuilder.Register(&TransferJob{}, &TransferJobList{})
}
